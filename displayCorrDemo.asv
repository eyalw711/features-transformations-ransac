%RGB = imread('Hindenburg_disaster.jpg');
%Im = rgb2gray(RGB);
image1name = 'left.pgm';
image2name = 'right.pgm';

%% Q1
Im = imread(image1name);
H = [1 .2 0; .1 1 0; 0.5 0.2 1];
TransformedIm = ComputeProjective(Im, H);

imwrite(TransformedIm,'myright.pgm');

%% Q2
Im = imread(image1name);
TransformedIm = imread(image2name);
[num_matches, matches, dist_vals] = match(image1name, image2name, 0.5);
%displayedCorr = DisplayCorr(Im, TransformedIm, matches, dist_vals, 10);

%% Q3

H_comp = DLT(matches);
%H_comp

%% Q4

[pnts_gt, pnts_computed] = ComputeTestPoints(H, H_comp);
error_dlt = ComputeError(pnts_gt, pnts_computed);
%error_dlt

%% Q5
s = 10;
t = 10;
H_ransac = RANSAC_Wrapper(matches, @ransac_fitting, @affine_trans_dist, @(x) 0, s, t, 0, 100, 1000);
[pnts_gt, pnts_ransac] = ComputeTestPoints(H, H_ransac);
error_ransac = ComputeError(pnts_gt, pnts_ransac);
%error_ransac

fprintf('DLT error: %.3g, RANSAC error: %.3g\n', error_dlt, error_ransac);
fprintf('RANSAC error is %.3g%% of DLT error\n', 100*error_ransac/error_dlt);

%% Qualitative error evaluation:

inv_trans_ransac = invert(affine2d(H_ransac));
reconstructed_ransac = imwarp(TransformedIm, inv_trans_ransac);
imshowpair(Im, reconstructed_ransac);
